#include <iostream>
#include <conio.h>
#include <stdlib.h>
using namespace std;

// Estructura de un arbol
struct Node{
	int root;
   	Node *right;
   	Node *left;
};

// El arbol se declara como una estructura vacia
Node *tree = NULL;

// Prototipos de Funciones
void menu();
Node *createNode(int);
void insertNode(Node *&,int);
void viewTree(Node *,int);
void preOrder(Node *);
void inOrder(Node *);
void postOrder(Node *);

// Funcion principal
int main(){
   	menu();
	getch();
   	return 0;
}

// Funcion de menu
void menu(){
	int root,opt,count=0;
	do{
   		cout<<"\t.:MENU:."<<endl;
   		cout<<"1. Insertar un nuevo nodo"<<endl;
   		cout<<"2. Mostrar el arbol completo"<<endl;
   		cout<<"3. Recorrer el arbol en PreOrden"<<endl;
   		cout<<"4. Recorrer el arbol en InOrden"<<endl;
   		cout<<"5. Recorrer el arbol en PostOrden"<<endl;
   		cout<<"6. Ver el manual de uso"<<endl;
    	cout<<"7. Salir"<<endl;
    	cout<<"Opcion: ";
      	cin>>opt;
		switch(opt){
      	case 1:
         	cout<<"\nInserte un numero: ";
            cin>>root;
            insertNode(tree,root);
            system("pause");
        	break;
        case 2:
         	cout<<"\nMostrando el arbol completo:\n\n";
            viewTree(tree,count);
            cout<<"\n";
            system("pause");
        	break;
        case 3:
         	cout<<"\nRecorrido en PreOrden: ";
            preOrder(tree);
            cout<<"\n\n";
            system("pause");
        	break;
    	case 4:
         	cout<<"\nRecorrido en InOrden: ";
            inOrder(tree);
            cout<<"\n\n";
            system("pause");
        	break;
    	case 5:
         	cout<<"\nRecorrido en PostOrden: ";
            postOrder(tree);
            cout<<"\n\n";
            system("pause");
        	break;
        case 6:
         	cout<<"\nLa opcion 1 se utiliza de la siguiente manera:";
         	cout<<"\n";
         	cout<<"\n * Se ingresa desde el nivel superior del arbol en orden de izquierda a derecha";
         	cout<<"\n * Ejemplo:";
         	cout<<"\n";
         	cout<<"\n                  4";
         	cout<<"\n              2       6";
         	cout<<"\n           1     3  5    7";
         	cout<<"\n";
         	cout<<"\n * El orden en el que se tendria que ingresar es:";
         	cout<<"\n";
         	cout<<"\n * 4 - 2 - 6 - 1 - 3 - 5 - 7";
         	cout<<"\n";
         	cout<<"\n\nLa opcion 2 muestra el arbol que se ingreso previamente girado 90 grados a la izquierda";
         	cout<<"\n";
         	cout<<"\n\nLa opcion 3 muestra el recorrido del arbol en preorden";
         	cout<<"\n";
         	cout<<"\n\nLa opcion 4 muestra el recorrido del arbol en inorden";
         	cout<<"\n";
         	cout<<"\n\nLa opcion 5 muestra el recorrido del arbol en postorden";
            cout<<"\n\n";
            system("pause");
        	break;
    	}
    	system("cls");
   	} while(opt != 7);
}

// Funcion para crear un nuevo nodo
Node *createNode(int num){
	Node *new_node = new Node();
   	new_node->root = num;
   	new_node->right = NULL;
   	new_node->left = NULL;
   	return new_node;
}

// Funcion para insertar nodos en el arbol
void insertNode(Node *&tree,int num){
	if(tree == NULL){ // Si el arbol esta vacio se crea un nuevo nodo
		Node *new_node = createNode(num);
   	tree = new_node;
   	} else { // Si el arbol tiene uno o mas nodos
   		int valOrigin = tree->root; // Obtenemos el valor de la raiz
      	if(num < valOrigin){ // Si es menor que el valor de la raiz se inserta en el lado izquierdo
      		insertNode(tree->left,num);
      	} else { // Si es menor que el valor de la raiz se inserta en el lado izquierdo
      		insertNode(tree->right,num);
      	}
   	}
}

// Funcion para mostrar el arbol completo
void viewTree(Node *tree, int cont){
	if(tree == NULL) { // Si el arbol esta vacio solo retorna
		return;
	} else {
		viewTree(tree->right,cont+1);
		for(int i=0;i<cont;i++){
			cout<<"   ";
		}
		cout<<tree->root<<endl;
		viewTree(tree->left,cont+1);
	}
}

// Funcion para recorrido de arbol -- PreOrden
void preOrder(Node *tree){
	if(tree == NULL) { // Si el arbol esta vacio solo retorna
		return;
	} else {
		cout<<tree->root<<" - ";
		preOrder(tree->left);
		preOrder(tree->right);
	}
}

// Funcion para recorrido de arbol -- InOrden
void inOrder(Node *tree){
	if(tree == NULL) { // Si el arbol esta vacio solo retorna
		return;
	} else {
		inOrder(tree->left);
		cout<<tree->root<<" - ";
		inOrder(tree->right);
	}
}

// Funcion para recorrido de arbol -- PostOrden
void postOrder(Node *tree){
	if(tree == NULL) { // Si el arbol esta vacio solo retorna
		return;
	} else {
		postOrder(tree->left);
		postOrder(tree->right);
		cout<<tree->root<<" - ";
	}
}
